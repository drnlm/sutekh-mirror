=== Requirements ===

The Python modules required are:

* SQLObject
* PyProtocols
* sqllite (or the module for whatever database one plans to use)
* PyGtk (for the GUI)
* Python-xml for the xml writing support

One will also need to download the official cardlist at:

* http://www.white-wolf.com/vtes/index.php?line=cardlist

to a local file.  Sutekh can also parse the official rulings
file from:

* http://www.white-wolf.com/vtes/index.php?line=rulings

so that might be useful too.

=== Getting Started ===

To get started, run:

python sutekh/SutekhCli.py --help
python sutekh/SutekhCli.py -c -r vtes_card_file.html
python sutekh/SutekhCli.py --ruling-file vtes_ruling_file.html (optional)

Currently the GUI mostly just supports creating a list of (physical)
cards one owns although it's also a means of browsing cards by card
type. Launch using:

* python sutekh/SutekhGui.py

You can save and load list of physical cards using:

python sutekh/SutekhCli.py --refresh-physical-card-tables
python sutekh/SutekhCli.py --save-physical-cards-to mycards.xml
python sutekh/SutekhCli.py --read-physical-cards-from mycards.xml

Short options for save and read are -s (save) and -l (load).  In practice -l
will usually be used in conjunction with a refresh:

python sutekh/SutekhCli.py --refresh-physical-card-tables -l mycards.xml

=== Using Sutekh from the Python Interpreter ===

I think the most useful part of Sutekh at the moment is the ability
to play around with the database from inside the Python interpreter:

python
>>> from sutekh import * 
>>> start() 

An example:

Print all Malkavian cards:
>>> for oC in Clan.byName('Malkavian').cards:
...           print oC.name

>>> oTony = AbstractCard.byName('Tony')
>>> print oTony
>>> for oP in oTony.discipline:
...     print oP.level, oP.discipline
>>> print oTony.cardtype
>>> print oTony.capacity
>>> print oTony.clan
>>> print oTony.group
>>> print oTony.text
>>> oMariel = list(AbstractCard.select(AbstractCard.q.name.startswith('Mariel')))[0]

Filtering:

>>> aC = AbstractCard.select(CardTextFilter('Laibon').getExpression())
>>> for oC in aC:
...     print oC.name, oC.cardtype

>>> oF1 = DisciplineFilter('Dementation')
>>> oF2 = CardTextFilter('bleed')
>>> oF3 = CardTypeFilter('Action')
>>> oF4 = CardTypeFilter('Action Modifier')
>>> oF5 = FilterOrBox([oF3,oF4])
>>> oF = FilterAndBox([oF1,oF2,oF5])
>>> for oC in AbstractCard.select(oF.getExpression()):
...     print "---", oC.name, "---"
...     print oC.text

=== Adding Indexes to Sqlite Databases ===

Sqlite databases access can be signigicantly sped up by adding indexes.  Use:

./sqlite3 sutekh.db
CREATE INDEX abstract_card_index_01 ON abstract_card (id);
CREATE INDEX physical_card_index_01 ON physical_card (id);
CREATE INDEX physical_card_index_02 ON physical_card (abstract_card_id);
CREATE INDEX physical_map_index_01 ON physical_map (physical_card_id);
CREATE INDEX physical_map_index_02 ON physical_map (physical_card_set_id);
CREATE INDEX abstract_map_index_01 ON abstract_map (abstract_card_id);
CREATE INDEX abstract_map_index_02 ON abstract_map (abstract_card_set_id);
CREATE INDEX abs_discipline_pair_map_index_01 ON abs_discipline_pair_map (abstract_card_id);
CREATE INDEX abs_discipline_pair_map_index_02 ON abs_discipline_pair_map (discipline_pair_id);
CREATE INDEX abs_rarity_pair_map_index_01 ON abs_rarity_pair_map (abstract_card_id);
CREATE INDEX abs_rarity_pair_map_index_02 ON abs_rarity_pair_map (rarity_pair_id);
CREATE INDEX abs_ruling_map_index_01 ON abs_ruling_map (abstract_card_id);
CREATE INDEX abs_ruling_map_index_02 ON abs_ruling_map (ruling_id);
CREATE INDEX abs_type_map_index_01 ON abs_type_map (abstract_card_id);
CREATE INDEX abs_type_map_index_02 ON abs_type_map (card_type_id);
.quit

If you're using sqlite version 2, you'll need to replace the first line with:

./sqlite sutekh.db

=== Philosophy ===

Conceptually Sutekh is organised around two datatypes, AbstractCard
and PhysicalCard. AbstractCard models a conceptual card (e.g. ".44 Magnum")
while PhysicalCard stores information about an actual rectangular piece of
cardboard (e.g. My third copy of a .44 Magnum from the VTES expansion).

