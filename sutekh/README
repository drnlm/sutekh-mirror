=== Requirements ===

The Python modules required are:

* SQLObject [ http://cheeseshop.python.org/pypi/SQLObject, version 0.7.1b1 ]
* PyProtocols [ http://cheeseshop.python.org/pypi/PyProtocols ]
* sqlite (or the module for whatever database one plans to use)
* PyGtk (for the GUI) [ http://cheeseshop.python.org/pypi/PyGTK ]  
* Python-xml for the xml writing support

One will also need to download the official cardlist at:

* http://www.white-wolf.com/vtes/index.php?line=cardlist

to a local file.  Sutekh can also parse the official rulings
file from:

* http://www.white-wolf.com/vtes/index.php?line=rulings

so that might be useful too.

=== Getting Started ===

To get started, run:

python sutekh/SutekhCli.py --help
python sutekh/SutekhCli.py -c -r vtes_card_file.html
python sutekh/SutekhCli.py --ruling-file vtes_ruling_file.html (optional)

Currently the GUI mostly just supports creating a list of (physical)
cards one owns although it's also a means of browsing cards by card
type. Launch using:

* python sutekh/SutekhGui.py

You can save and load list of physical cards using:

python sutekh/SutekhCli.py --refresh-physical-card-tables
python sutekh/SutekhCli.py --save-physical-cards-to mycards.xml
python sutekh/SutekhCli.py --read-physical-cards-from mycards.xml

Short options for save and read are -s (save) and -l (load).  In practice -l
will usually be used in conjunction with a refresh:

python sutekh/SutekhCli.py --refresh-physical-card-tables -l mycards.xml

=== Using Sutekh from the Python Interpreter ===

I think the most useful part of Sutekh at the moment is the ability
to play around with the database from inside the Python interpreter:

python
>>> from sutekh import * 
>>> start() 

An example:

Print all Malkavian cards:
>>> for oC in Clan.byName('Malkavian').cards:
...           print oC.name

>>> oTony = AbstractCard.byName('Tony')
>>> print oTony
>>> for oP in oTony.discipline:
...     print oP.level, oP.discipline
>>> print oTony.cardtype
>>> print oTony.capacity
>>> print oTony.clan
>>> print oTony.group
>>> print oTony.text
>>> oMariel = list(AbstractCard.select(AbstractCard.q.name.startswith('Mariel')))[0]

Filtering:

>>> aC = AbstractCard.select(CardTextFilter('Laibon').getExpression())
>>> for oC in aC:
...     print oC.name, oC.cardtype

>>> oF1 = DisciplineFilter('Dementation')
>>> oF2 = CardTextFilter('bleed')
>>> oF3 = CardTypeFilter('Action')
>>> oF4 = CardTypeFilter('Action Modifier')
>>> oF5 = FilterOrBox([oF3,oF4])
>>> oF = FilterAndBox([oF1,oF2,oF5])
>>> for oC in AbstractCard.select(oF.getExpression()):
...     print "---", oC.name, "---"
...     print oC.text

=== Database Notes ===

==== Adding Indexes to Sqlite Databases ====

Sqlite databases access can be signigicantly sped up by adding indexes.  Use:

./sqlite3 sutekh.db
CREATE INDEX physical_map_index_01 ON physical_map (physical_card_id);
CREATE INDEX physical_map_index_02 ON physical_map (physical_card_set_id);
CREATE INDEX abstract_map_index_01 ON abstract_map (abstract_card_id);
CREATE INDEX abstract_map_index_02 ON abstract_map (abstract_card_set_id);
CREATE INDEX abs_discipline_pair_map_index_01 ON abs_discipline_pair_map (abstract_card_id);
CREATE INDEX abs_discipline_pair_map_index_02 ON abs_discipline_pair_map (discipline_pair_id);
CREATE INDEX abs_rarity_pair_map_index_01 ON abs_rarity_pair_map (abstract_card_id);
CREATE INDEX abs_rarity_pair_map_index_02 ON abs_rarity_pair_map (rarity_pair_id);
CREATE INDEX abs_ruling_map_index_01 ON abs_ruling_map (abstract_card_id);
CREATE INDEX abs_ruling_map_index_02 ON abs_ruling_map (ruling_id);
CREATE INDEX abs_type_map_index_01 ON abs_type_map (abstract_card_id);
CREATE INDEX abs_type_map_index_02 ON abs_type_map (card_type_id);
.quit

For large databases, sqlite will also benefit from running ANALYZE after the
indexes have been created (note that the ANALYZE command is only available in
sqlite3 from version 3.2.3):

./sqlite3 sutekh.db
ANALYZE;
.quit

If you're using sqlite version 2, you'll need to replace the first line with:

./sqlite sutekh.db

==== Using other database backends ====

Sutekh has been developed mainly with sqlite, but, since it uses SQLObject for
to manage the databases, it is possible to try other database backends by 
specifying a suitable URI. So to use a postgresql database, specify:
postres://username@host/database

PostgreSQL has been tested. Sutekh can be made to work with mysql version 5 
or later, but, due to some issues with SQLObject 0.7.0 and MySQLdb 1.2.1, this
is not that simple. Due to the database schema used, though, Sutekh will 
definately NOT work with MySQL version 4.

Other databases are untested.

=== Clustering Plugin ===

Sutekh has the ability to data mine card sets for related groups of
cards using the Cluster 3.0 [1] data clustering package. You'll need to download
a version of Cluster 3.0 (the command-line only version has the least
dependencies if you're looking to get up and running quickly on a Unix platform).
Once you've created a bunch of clusters of related cards, the clustering
plugin gives you the option of creating decks from whichever clusters look
promising.

You'll also need to obtain Pycluster (from the same page) which contains the
Python bindings for Cluster 3.0. Alternatively you can the Bio.Cluster version
of Pycluster.

You may also like to obtain a program for viewing the clustering output
although Sutekh doesn't currently support writing out the clusters. One
such viewer is TreeView (unfortunately Java-based) [2].

If you don't have any of these clustering packages, Sutekh will simply not
load the clustering plugin and run fine without it.

[1] http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/cluster/software.htm
[2] http://jtreeview.sourceforge.net/

If you're wanting to modify the clustering plugin, you can find some usage
examples at:

[3] http://www.dalkescientific.com/writings/NBN/clustering.html
[4] http://b-src.cbrc.jp/markup/Pycluster-1.29/python/test/test_Cluster.py

=== Philosophy ===

Conceptually Sutekh is organised around two datatypes, AbstractCard
and PhysicalCard. AbstractCard models a conceptual card (e.g. ".44 Magnum")
while PhysicalCard stores information about an actual rectangular piece of
cardboard (e.g. My third copy of a .44 Magnum from the VTES expansion).


